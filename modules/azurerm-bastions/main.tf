
resource "azurerm_public_ip" "bastion-pips" {
 for_each = {
    for key, value in var.bastions : key => value if value.sku != "Developer"
    
  }
     name = "${each.value.name}-pip"
     location = each.value.location
     resource_group_name = each.value.resource_group_name
     allocation_method = each.value.allocation_method
     sku = each.value.pip_sku
}
# üß† ‡§Ü‡§∏‡§æ‡§® ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§ø‡§è:
# üîπ resource "azurerm_public_ip" "bastion-pips"
# Ye ek Azure Public IP address resource define kar raha hai.

# "bastions-pips" iska naam hai, jiska use module ke andar reference ke liye hota hai.

# üîπ for_each = { ... }
# for_each ka use yahan multiple public IPs banane ke liye ho raha hai, jo var.bastions variable se aa rahe hain.

# Ye variable ek map ya object hoga jisme bastion host configurations hain.

# üîπ for key, value in var.bastions : key => value if value.sku != "Developer"
# Is loop ka matlab hai: bastion list me se sirf unhi items ko choose karo jin ka SKU "Developer" nahi hai.

# key => value format me ek naya map banaya ja raha hai, jise for_each me pass kiya ja raha hai.

# üëâ Matlab: Agar kisi bastion ka sku = "Developer" hai to uske liye public IP nahi banega.

# üîπ name = "${each.value.name}-pip"
# Har public IP ka naam banaya ja raha hai: bastion ka naam + -pip suffix.

# üîπ location = each.value.location
# Public IP wahi location me banega jahan bastion host hai.

# üîπ resource_group_name = each.value.resource_group_name
# Ye resource kis Resource Group me create hoga ‚Äî wo value bastion ke config se li ja rahi hai.

# üîπ allocation_method = each.value.allocation_method
# IP address ka allocation method (e.g., Static ya Dynamic).

# üîπ sku = each.value.pip_sku
# IP ka SKU define karta hai (Basic ya Standard).

# üîö ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç:
# Ye Terraform block bastion hosts ke liye public IPs banata hai, lekin sirf unhi bastions ke liye jinke SKU "Developer" nahi hain.


resource "azurerm_bastion_host" "bastions" {
   for_each = var.bastions
   name = each.value.name
   location = each.value.location
   resource_group_name = each.value.resource_group_name
   virtual_network_id = lookup(each.value,"sku",null) == "Developer"? data.azurerm_virtual_network.bas-vnet[each.key].id : null
   shareable_link_enabled = each.value.shareable_link_enabled
   kerberos_enabled = each.value.kerberos_enabled
   ip_connect_enabled = each.value.ip_connect_enabled
   sku = each.value.sku
   copy_paste_enabled = each.value.copy_paste_enabled
   file_copy_enabled = each.value.file_copy_enabled
   tags = each.value.tags
   zones = each.value.zones
   tunneling_enabled = each.value.tunneling_enabled
   session_recording_enabled = each.value.session_recording_enabled

   dynamic "ip_configuration" {
      for_each = lookup(each.value,"sku", null) == "Developer" ? [] :[1] # # Empty list for "Developer", non-empty for others
     content {
       name = "${each.value.name}-ip-config"
       subnet_id = data.azurerm_subnet.bas-sub[each.key].id
       public_ip_address_id = azurerm_public_ip.bastion-pips[each.key].id
     }
   }
  
}

# dynamic "ip_configuration" {
#   for_each = lookup(each.value,"sku", null) == "Developer" ? [] : [1]  # Empty list for "Developer", non-empty for others
# üîπ Line 1: dynamic "ip_configuration"
# Terraform ‡§Æ‡•á‡§Ç dynamic block ‡§§‡§¨ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§ú‡§¨ ‡§π‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§∏‡•Ä block (‡§ú‡•à‡§∏‡•á ip_configuration) ‡§ï‡•ã condition ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ include/exclude ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡•§

# ‡§Ø‡§π‡§æ‡§Å ‡§π‡§Æ ip_configuration block ‡§ï‡•ã dynamic ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§
# üîπ Line 2: for_each = lookup(each.value,"sku", null) == "Developer" ? [] : [1]
# ‡§Ø‡§π line ‡§¨‡§π‡•Å‡§§ important ‡§π‡•à ‚Äî ‡§ö‡§≤‡§ø‡§è ‡§á‡§∏‡•á ‡§§‡•ã‡§°‡§º‡§ï‡§∞ ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç:

# lookup(each.value,"sku", null) ‚Üí
# ‡§Ø‡§π bastion ‡§ï‡•Ä details ‡§∏‡•á "sku" ‡§®‡§æ‡§Æ ‡§ï‡•Ä key ‡§ï‡•Ä value ‡§ñ‡•ã‡§ú‡§§‡§æ ‡§π‡•à‡•§ ‡§Ö‡§ó‡§∞ ‡§®‡§æ ‡§Æ‡§ø‡§≤‡•á ‡§§‡•ã null return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

# == "Developer" ‚Üí
# ‡§Ø‡§π ‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§â‡§∏ bastion ‡§ï‡•Ä SKU "Developer" ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§

# ? [] : [1] ‚Üí
# ‡§Ø‡§π ‡§è‡§ï ternary condition ‡§π‡•à:
# Condition	for_each ‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ	‡§Æ‡§§‡§≤‡§¨
# ‡§Ö‡§ó‡§∞ "sku" == "Developer"	‡§ñ‡§æ‡§≤‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü []	‡§Æ‡§§‡§≤‡§¨ block apply ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ
# ‡§Ö‡§ó‡§∞ "sku" != "Developer"	‡§è‡§ï ‡§Ü‡§á‡§ü‡§Æ ‡§µ‡§æ‡§≤‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü [1]	block apply ‡§π‡•ã‡§ó‡§æ
# üìå ‡§§‡•ã ‡§Ø‡§π logic ensure ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ip_configuration block ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§§‡§≠‡•Ä apply ‡§π‡•ã ‡§ú‡§¨ bastion "Developer" ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
# content {
#     name = "${each.value.name}-ip-config"
#     üîπ content { ... }
# ‡§ú‡§¨ dynamic block apply ‡§π‡•ã‡§ó‡§æ, ‡§§‡•ã ‡§Ø‡§π‡•Ä content ‡§â‡§∏‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§
# ‡§Æ‡§§‡§≤‡§¨ actual ip_configuration block ‡§ï‡•Ä ‡§Ö‡§Ç‡§¶‡§∞ ‡§ï‡•Ä values ‡§Ø‡§π‡•Ä‡§Ç define ‡§π‡•à‡§Ç‡•§
# üîπ name = "${each.value.name}-ip-config"
# Bastion ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§≤‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à ‡§î‡§∞ ‡§â‡§∏‡§ï‡•á ‡§∏‡§æ‡§• -ip-config ‡§ú‡•ã‡§°‡§º‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§
# ‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡§Ö‡§ó‡§∞ bastion ‡§ï‡§æ ‡§®‡§æ‡§Æ "bastion1" ‡§π‡•à, ‡§§‡•ã config name ‡§π‡•ã‡§ó‡§æ "bastion1-ip-config"‡•§
# subnet_id = data.azurerm_subnet.bas-sub[each.key].id
#  üîπ subnet_id
# Bastion ‡§ï‡§ø‡§∏ subnet ‡§Æ‡•á‡§Ç deploy ‡§π‡•ã‡§ó‡§æ, ‡§â‡§∏‡§ï‡§æ ID ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§
# ‡§Ø‡§π ID ‡§π‡§Æ ‡§™‡§π‡§≤‡•á ‡§µ‡§æ‡§≤‡•á data "azurerm_subnet" "bas-sub" block ‡§∏‡•á ‡§≤‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§
# each.key ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è ‡§π‡§Æ specific bastion ‡§ï‡•ã identify ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§
# public_ip_address_id = azurerm_public_ip.bastion-pips[each.key].id
# üîπ public_ip_address_id
# Bastion ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡•ã public IP allocate ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§â‡§∏‡§ï‡§æ ID ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§
# ‡§Ø‡§π IP Terraform ‡§ï‡•á resource azurerm_public_ip.bastion-pips ‡§∏‡•á ‡§Ü‡§Ø‡§æ ‡§π‡•à‡•§

